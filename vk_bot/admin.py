import vk_api
from django.contrib import admin, messages
from django.http import HttpRequest
from django.shortcuts import redirect
from django.utils.decorators import method_decorator
from django.views.decorators.csrf import csrf_protect
from unfold.admin import ModelAdmin
from unfold.decorators import action

from conf import settings
from vk_bot.tasks import import_vk_posts
from vk_bot.models import VKPost
from vk_bot.services import VKService

csrf_protect_m = method_decorator(csrf_protect)


@admin.register(VKPost)
class VKPostAdmin(ModelAdmin):
    list_display = ('post_id', 'date', 'vk_group_id', 'from_django')
    actions_on_top = True    # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π
    actions_on_bottom = True # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π

    @action(description="üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –∏–∑ VK")
    def import_vk_posts_action(self, request, queryset):
        task = import_vk_posts.delay()
        messages.success(request, f"–ò–º–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω! –ó–∞–¥–∞—á–∞ ID: {task.id}")
        return redirect("admin:vk_bot_vkpost_changelist")

    @action(description="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤ VK")
    def post_to_vk_action(self, request, queryset):
        vk = VKService()
        count = 0
        for post in queryset:
            vk.post_to_group(post.text)
            count += 1
        messages.success(request, f"{count} –ø–æ—Å—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ VK!")

    @action(description="‚ùå –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–∑ VK")
    def delete_post_action(self, request, queryset):
        vk = VKService()
        count = 0
        for post in queryset:
            if post.post_id:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ—Å—Ç
                    post_info = vk.api.wall.getById(posts=f"-{settings.VK_GROUP_ID}_{post.post_id}")
                    if post_info:
                        vk.delete_post(post.post_id)
                        count += 1
                    else:
                        messages.warning(request, f"–ü–æ—Å—Ç {post.post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ {settings.VK_GROUP_ID}")
                except vk_api.exceptions.ApiError as e:
                    messages.error(request, f"–û—à–∏–±–∫–∞ VK API –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ {post.post_id}: {e}")
                except Exception as e:
                    messages.error(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ {post.post_id}: {e}")
        messages.success(request, f"{count} –ø–æ—Å—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–æ –∏–∑ VK!")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    actions = ["import_vk_posts_action", "post_to_vk_action", "delete_post_action"]