from django.db import models
from django.utils.text import slugify
from pytils.translit import slugify as translit_slugify
from tinymce.models import HTMLField

class Category(models.Model):
    ''' –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π '''
    title = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    slug = models.CharField(max_length=250, unique=True, blank=True)
    content = HTMLField(default='–°–∫–æ—Ä–æ —Ç—É—Ç –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ', verbose_name="–¢–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    photo = models.ImageField(upload_to='photos/', blank=True, null=True)
    is_published = models.BooleanField(default=True)

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = self.generate_unique_slug()
        super().save(*args, **kwargs)

    def generate_unique_slug(self):
        """ –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π slug –∏–∑ title, –∏—Å–ø–æ–ª—å–∑—É—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ """
        slug = translit_slugify(self.title) if any("–∞" <= ch <= "—è" for ch in self.title.lower()) else slugify(
            self.title)
        unique_slug = slug
        num = 1
        while Category.objects.filter(slug=unique_slug).exists():
            unique_slug = f"{slug}-{num}"
            num += 1
        return unique_slug

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
        verbose_name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'

class Tag(models.Model):
    ''' –¢–µ–≥–∏ –ù–æ–≤–æ—Å—Ç–µ–π '''
    title = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞")
    slug = models.CharField(max_length=250, unique=True, blank=True)

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = self.generate_unique_slug()
        super().save(*args, **kwargs)

    def generate_unique_slug(self):
        """ –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π slug –∏–∑ title, –∏—Å–ø–æ–ª—å–∑—É—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ """
        slug = translit_slugify(self.title) if any("–∞" <= ch <= "—è" for ch in self.title.lower()) else slugify(
            self.title)
        unique_slug = slug
        num = 1
        while Tag.objects.filter(slug=unique_slug).exists():
            unique_slug = f"{slug}-{num}"
            num += 1
        return unique_slug

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = '–¢–µ–≥'
        verbose_name_plural = '–¢–µ–≥–∏'

class Post(models.Model):
    ''' –î–ª—è –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ '''
    title = models.CharField(max_length=255, verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏")
    slug = models.CharField(max_length=250, unique=True, blank=True)
    content = HTMLField(default='–°–∫–æ—Ä–æ —Ç—É—Ç –±—É–¥–µ—Ç —Å—Ç–∞—Ç—å—è', verbose_name="–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    photo = models.ImageField(upload_to='photos/', blank=True, null=True, verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    watched = models.IntegerField(default=0, verbose_name="–ü—Ä–æ—Å–º–æ—Ç—Ä—ã")
    is_published = models.BooleanField(default=True, verbose_name="–ü—É–±–ª–∏–∫–∞—Ü–∏—è")
    category = models.ForeignKey(Category, on_delete=models.CASCADE, verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    tags = models.ManyToManyField(Tag, related_name='posts', verbose_name="–¢–µ–≥–∏")

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = self.generate_unique_slug()
        super().save(*args, **kwargs)

    def generate_unique_slug(self):
        """ –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π slug –∏–∑ title, –∏—Å–ø–æ–ª—å–∑—É—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ """
        slug = translit_slugify(self.title) if any("–∞" <= ch <= "—è" for ch in self.title.lower()) else slugify(
            self.title)
        unique_slug = slug
        num = 1
        while Post.objects.filter(slug=unique_slug).exists():
            unique_slug = f"{slug}-{num}"
            num += 1
        return unique_slug  # üëà –î–æ–±–∞–≤–ª—è–µ–º return

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = '–ü–æ—Å—Ç'
        verbose_name_plural = '–ü–æ—Å—Ç—ã'



